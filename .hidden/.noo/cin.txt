//strees
//arraysutils
//treeutils
void transversal(treenodo *tr)
{
    queue *cola;
    treenodo * aux;
    int i=0;
    int nICL=1;
    int nINL=0;
    if(tr!=NULL)
    {
	create(&cola);
	encolar(&cola,tr);
	while(i<iii)
	{
	    desencolar(&cola,&aux);
  	    cout<<aux->dato<<" ";
	    if(aux->izqptr != NULL)
		encolar(&cola,aux->izqptr);
	    if(aux->derptr != NULL)
		encolar(&cola,aux->derptr);
	    i++;
	}
    }
    cout<<endl;
}

//openglutils
struct hijop
{
    int hI;
    int hD;
};
int nnsub(int * arr)
{
    int nsub=0, i=0;
    while (arr[i]!=-1)
    {
	i++;
    	nsub++;
    }
    return nsub;
}


void imp_sub(int root, int * izq_sub, int * der_sub)
{
    arraysutils au;
    cout<<"***********************************************"<<endl;
    cout<<"ROOT: "<<root<<endl;
    cout<<"IZQ: "<<endl;
    au.imp_vect(izq_sub,nnsub(izq_sub));
    cout<<"DER: "<<endl;
    au.imp_vect(der_sub,nnsub(der_sub)); //TODO: Corregir los subárboles derechos, tiran sorpresas!!
    cout<<"***********************************************"<<endl;

}

int ipi(int index,int * sub)
{
    int i,elem;
    elem=numbersPRE[index];
    for(i=0;i<nnsub(sub);i++)
    {
	if(sub[i]==elem)
	{
	     return i;
	}
    }
}

int * sub_i(int idroot, int * arr)
{
    int * aux = (int *)(malloc(500*sizeof(int)));
    int i;
    for(i=0;i<idroot;i++)
    	aux[i]=arr[i];
    aux[i]=-1;
    return aux;
}

int * sub_d(int idroot, int * arr)
{
    int * aux = (int *)(malloc(500*sizeof(int)));
    int i,j=0;
    arraysutils au;
    for(i=idroot+1;i<nnsub(arr);i++)
    {
	aux[j]=arr[i];
	j++;
    }
    aux[j]=-1;
    return aux;
}

/*void imp_tree(GLfloat xi, GLfloat yi, int root, int * sub_R, int index)
{
    int i,ippi,root_i,root_d;
    int * izq_sub;
    int * der_sub;
    GLfloat xid,xii,yid,yii;
    if(index < 10 && root != -1)
    {
	cpr(root);
	ippi=ipi(index,sub_R);//General case
	der_sub=sub_d(ippi,sub_R);
	izq_sub=sub_i(ippi,sub_R);
	//imp_sub(root,izq_sub,der_sub);
    	//index++;
	root_d=der_sub[ipi(index,der_sub)];
	root_i=izq_sub[ipi(index,izq_sub)];
	cout<<"INDEX: "<<index<<endl;
	xid=xi+0.1;
	yid=yi-0.1;
	//imp_tree(xid,yid,root_d,sub_R,index);
	imp_tree(xid,yid,root_d,der_sub,index); //Trabaja con el subárbol derecho
	xii=xi-0.1;
	imp_tree(xii,yid,root_i,izq_sub,index); //Trabaja con el subárbol izquierdo
	//imp_tree(xii,yid,root_i,sub_R,index);
    }
}
*/
